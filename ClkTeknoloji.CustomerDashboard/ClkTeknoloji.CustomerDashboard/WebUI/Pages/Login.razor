@page "/login"
@layout ClkTeknoloji.CustomerDashboard.WebUI.Shared.EmptyLayout


<div class="container-fluid h-100">
    <div class="row justify-content-center align-items-center h-100">
        <div class="col col-sm-6 col-mg-6 col-lg-4 col-xl-3">
            <EditForm Model="@userLoginRequest" OnValidSubmit="LoginProcess">
                <DataAnnotationsValidator />

                <div class="form-group">
                    @*<InputText @bind-Value="userLoginRequest.EMail" class="form-control form-control-lg" ></InputText>*@
                    <input @bind-value="userLoginRequest.EMail" class="form-control form-control-lg" type="text" placeholder="E-Mail Address" />
                </div>

                <div class="form-group">
                    @*<InputText @bind-Value="userLoginRequest.EMail" class="form-control form-control-lg" ></InputText>*@
                    <input @bind-value="userLoginRequest.Password" class="form-control form-control-lg" type="password" placeholder="Şifreniz" />
                </div>

                <div class="form-group">
                    <button class="btn btn-info">Login</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Inject] HttpClient httpClient { get; set; }

    [Inject] NavigationManager navManager { get; set; }

    [Inject] IUserService userSerivce { get; set; }

    private UserLoginRequest userLoginRequest = new UserLoginRequest();

    private async Task LoginProcess()
    {
        var httpResponse = await userSerivce.UserLogin(userLoginRequest);

        if (httpResponse.User !=null)
        {
            try
            {
                navManager.NavigateTo("/");
                //   var res = await httpResponse.Content.ReadFromJsonAsync<ServiceResponse<UserLoginResponseDTO>>();

                //if (res.Success)
                //{
                //    //await localStorageService.SetItemAsync("token", res.Value.ApiToken);
                //    //await localStorageService.SetItemAsync("email", res.Value.User.EMailAddress);
                //    //await localStorageService.SetItemAsync("UserId", res.Value.User.Id.ToString());
                //    //await localStorageService.SetItemAsync("UserFullName", res.Value.User.FullName);
                //    //(authenticationStateProvider as AuthStateProvider).NotifyUserLogin(res.Value.User.EMailAddress); //bir kullanıcı giriş yaptı bundan kullanıcı oluşturacak isteğim yerde kullanabileceğiz.

                //    //httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", res.Value.ApiToken);
                //    navManager.NavigateTo("/");
                //}
                //else
                //{
                //    //await modalManager.ShowMessageAsync("Login Error", res.Message);
                //}
            }
            catch (Exception ex)
            {

                //  await modalManager.ShowMessageAsync("Login Error", ex.Message);
            }

        }
    }


}
