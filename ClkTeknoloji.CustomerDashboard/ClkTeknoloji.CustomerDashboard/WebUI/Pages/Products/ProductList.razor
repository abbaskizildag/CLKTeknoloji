@page "/productslist"
@using AntDesign.TableModels
@using System.Text.Json;

<h3>Teknik Servisde Kayıtlı Ürün Listesi</h3>

<div class="card">
    <div class="card-header d-flex align-items-center h-75">
        Arama Kısmı
    </div>

    <div class="card-body">
        <EditForm Model="@filterModel">
            <div class="form-row">
                <div class="form-group col">
                    <label>Müşteri Adı</label>
                    <ClkTeknoloji.CustomerDashboard.CustomComponents.CustomerDropDown @bind-Value="selectedCustomer" @bind-Value:event="ValueChanged" />
                    @*<MealOrdering.Client.CustomComponents.UserListDropDown @bind-Value="filterModel.CreatedUserId" @bind-Value:event="ValueChanged"></MealOrdering.Client.CustomComponents.UserListDropDown>*@
                </div>

                <div class="form-group col">
                    <label>Tarih Aralığı</label>
                    <div class="d-flex">
                        <InputDate class="form-control" @bind-Value="filterModel.CreateDateFirst" />
                        <InputDate class="form-control" @bind-Value="filterModel.CreateDateLast" />
                    </div>
                </div>
            </div>
            <div class="form-row">
                <div class="form-group col">
                    <label>Arıza Durumu</label>
                    @*<InputText @bind-Value="@productModel.Statu" class="form-control" />*@
                    <InputSelect @bind-Value="@filterModel.Statu" class="form-control">
                        <option value="Seçilmedi">Lütfen arıza durumu seçiniz.</option>
                        <option value="Yapılıyor">Yapılıyor</option>
                        <option value="Tamamlandı">Tamamlandı</option>
                        <option value="İade">İade</option>
                    </InputSelect>
                </div>

                <div class="form-group col">
                    <label>Arıza Türü</label>
                    <InputSelect @bind-Value="@filterModel.Type" class="form-control">
                        <option value="Seçilmedi">Lütfen hangi tür olduğunu seçiniz.</option>
                        <option value="Bilgisayar">Bilgisayar</option>
                        <option value="Telefon">Telefon</option>
                        <option value="Laptop">Laptop</option>
                    </InputSelect>
                </div>

                <div class="form-group col">
                    <label>Servis</label>
                    <InputSelect @bind-Value="@filterModel.ServiceId" class="form-control">
                        <option value="0">Lütfen hangi tür olduğunu seçiniz.</option>
                        <option value="1">CLK</option>
                        <option value="2">Bizim Servis</option>
                        <option value="3">Garanti</option>
                    </InputSelect>
                </div>

            </div>
                <div class="form-row">
                    <div class="btn-group">

                        <button class="btn btn-primary m-1" @onclick="ReLoadList">
                            <span class="fas fa-search"></span> Arama Yap
                        </button>

                        <button class="btn btn-outline-success m-1" @onclick="goCreateUserPage"><span class="fas fa-user-plus"></span> Yeni Servis Kaydı Oluştur</button>
                        @*<AddNewButtonComponent Caption="Create Order" OnClick="GoCreateOrder" />*@
                    </div>
                </div>
        </EditForm>
    </div>
</div>

<br />

<Table @ref="table" Bordered=@true Size=@TableSize.Small
       TItem="ProductDto"
       DataSource="@productsList"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange">
    <Selection Key="@(context.Id.ToString())" />
    <Column Ellipsis Title="Id" Field="@context.Id" Width="40px" />
    <Column Title="Eklenme Tarihi" Field="@context.CreateDate" Format="yyyy-MM-dd" Ellipsis />
    <Column  Title="Adı Soyadı" Field="@context.Customer?.FullName" Ellipsis />
    <Column  Title="Servis" Field="@context.Service?.Name" Ellipsis />
    <ActionColumn Title="Durum" Width="90px">
        <Space>
            <SpaceItem>
                <span class="badge badge-pill  badge-@(context.Statu=="Tamamlandı"?"success":(context.Statu=="İade"?"info":"primary"))">@(context.Statu=="Tamamlandı" ? "Tamamlandı":(context.Statu=="İade"?"İade":"Yapılıyor"))</span>
            </SpaceItem>
        </Space>
    </ActionColumn>
    <Column Title="Ücreti" Field="@context.Price" />

    <ActionColumn Title="#">
        <Space Size="small">
            <SpaceItem>
                <button class="btn btn-danger btn-sm" @onclick="@(()=>DeleteProduct(context.Id))"><span class="fas fa-trash"></span></button>
                <button class="btn btn-success btn-sm" @onclick="(() => goUpdatePage(context.Id))"><span class="fas fa-pen"></span></button>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>
<br />
<p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>

@code {
    [Inject] public HttpClient HttpClient { get; set; }

    [Inject] public IProductService productService { get; set; }

    [Inject] NavigationManager navigationManager { get; set; }

    public List<ProductDto> productsList = new List<ProductDto>();

    [Inject] ModalManager modalManager { get; set; }

    public ProductListFilterModel filterModel = new ProductListFilterModel() { CreateDateFirst = DateTime.Now.Date, CreateDateLast = DateTime.Now.Date };

    IEnumerable<ProductDto> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    public int selectedCustomer { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadList();
    }
    protected void goCreateUserPage()
    {
        navigationManager.NavigateTo("/products/add");
    }
    protected void goUpdatePage(int productId)
    {
        navigationManager.NavigateTo($"/products/edit/{productId}");
    }
    protected async Task LoadList()
    {
        productsList = (await productService.GetAllProduct()).ToList();

    }
    protected async Task DeleteProduct(int Id)
    {

        bool confirmed = await modalManager.ConfirmationAsync("Uyarı!", "Bu kaydı silmek istediğinizden emin misiniz?");
        if (!confirmed) return;

        await productService.DeleteProductById(Id);
        await LoadList();
    }

    public async Task OnChange(QueryModel<ProductDto> queryModel)
    {
        // forecasts = await GetForecastAsync(queryModel.PageIndex, queryModel.PageSize);
        _total = 2;
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }


    public void RemoveSelection(int id)
    {
        var selected = selectedRows.Where(x => x.Id != id);
        selectedRows = selected;
    }

    private void Delete(int id)
    {
        // forecasts = forecasts.Where(x => x.Id != id).ToArray();
        // _total = forecasts.Length;
    }

    public async Task ReLoadList()
    {
        //loading = true;

        filterModel.CustomerId = selectedCustomer;

        productsList = (await productService.GetProductByFilter(filterModel)).ToList();
    }
}
