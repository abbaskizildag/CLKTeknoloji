@page "/customerslist"
@using AntDesign.TableModels
@using System.Text.Json;
<h3>Müşteri Listesi</h3>

<div class="btn-group">
    <div class="container">
        <button class="btn btn-primary m-1" @onclick="goCreateCustomerPage"><span class="fas fa-user-plus"></span> Yeni Müşteri Oluştur</button>
    </div>
</div>
<br />
<Table @ref="table" Bordered=@true Size=@TableSize.Small
       TItem="CustomerDto"
       DataSource="@customersList"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange">
    <Selection Key="@(context.Id.ToString())" />
    <Column Ellipsis Title="Id" @bind-Field="@context.Id" Width="40px" />
    <Column Title="Eklenme Tarihi" @bind-Field="@context.CreateDate" Format="yyyy-MM-dd" />
    <Column TData="string" Title="Adı Soyadı" Field="@context.FullName" />
    <Column TData="string" Title="Adres" @bind-Field="@context.Address" Ellipsis />
    <Column TData="string" Title="Telefon" @bind-Field="@context.PhoneNumber" />
    <Column  Title="Kayıtlı Cihaz Sayısı" Field="@context.Products?.Count()" />
    <ActionColumn Title="#">
        <Space Size="small">
            <SpaceItem>
                <button class="btn btn-danger btn-sm" @onclick="@(()=>DeleteCustomer(context.Id))"><span class="fas fa-trash"></span></button>
                <button class="btn btn-success btn-sm" @onclick="(() => goUpdatePage(context.Id))"><span class="fas fa-pen"></span></button>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>
<br />
<p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>

@code {
    [Inject] public HttpClient HttpClient { get; set; }

    [Inject] public ICustomerService customerService { get; set; }

    [Inject] NavigationManager navigationManager { get; set; }

    [Inject] ModalManager modalManager { get; set; }

    public List<CustomerDto> customersList = new List<CustomerDto>();

    IEnumerable<CustomerDto> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadList();
    }
    protected void goCreateCustomerPage()
    {
        navigationManager.NavigateTo("/customers/add");
    }
    protected void goUpdatePage(int customerId)
    {
        navigationManager.NavigateTo($"/customers/edit/{customerId}");
    }
    protected async Task LoadList()
    {
        customersList = (await customerService.GetAllCustomer()).ToList();

    }
    protected async Task DeleteCustomer(int Id)
    {

        bool confirmed = await modalManager.ConfirmationAsync("Uyarı!", "Bu müşteriyi silmek istediğinizden emin misiniz?");
        if (!confirmed) return;

        await customerService.DeleteCustomerById(Id);
        await LoadList();
    }

    public async Task OnChange(QueryModel<CustomerDto> queryModel)
    {
        // forecasts = await GetForecastAsync(queryModel.PageIndex, queryModel.PageSize);
        _total = 2;
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }


    public void RemoveSelection(int id)
    {
        var selected = selectedRows.Where(x => x.Id != id);
        selectedRows = selected;
    }

    private void Delete(int id)
    {
        // forecasts = forecasts.Where(x => x.Id != id).ToArray();
        // _total = forecasts.Length;
    }
}
