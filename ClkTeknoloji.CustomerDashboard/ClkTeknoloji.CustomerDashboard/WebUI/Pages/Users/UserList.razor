@page "/userslist"
@using System.ComponentModel
@using AntDesign.TableModels
@using System.Text.Json;

<h3>CLK Personel Listesi</h3>

<div class="btn-group">
    <div class="container">
        <button class="btn btn-primary" @onclick="goCreateUserPage">Yeni Personel Oluştur</button>
    </div>
</div>
<br />
@*@if (usersList != null)
{
    <table class="table table-hover table-sm">
        <thead>
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Adı Soyadı</th>
                <th scope="col">E-Mail Adres</th>
                <th scope="col">Oluşturulma Tarihi</th>
                <th scope="col">Durum</th>
                <th scope="col">#</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in usersList)
            {
                string spanClass = "badge badge-pill badge-" + (user.IsActive ? "success" : "danger");
                <tr>
                    <td>@user.Id</td>
                    <td>@user.FullName</td>
                    <td>@user.EMailAddress</td>
                    <td>@user.CreateDate</td>
                    <td><span class="@spanClass">@(user.IsActive?"Active":"Passive")</span></td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(()=>DeleteUser(user.Id))">Sil</button>
                        <button class="btn btn-success" @onclick="(() => goUpdatePage(user.Id))">Güncelle</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}*@

<Table @ref="table"
       TItem="UserDto"
       DataSource="@usersList"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       @bind-SelectedRows="selectedRows"
       OnChange="OnChange">
    <Selection Key="@(context.Id.ToString())" />
    <Column  Ellipsis  @bind-Field="@context.Id" Sortable />
    <Column Ellipsis @bind-Field="@context.CreateDate" Format="yyyy-MM-dd" Sortable />
    <Column Ellipsis @bind-Field="@context.EMailAddress" Sortable />
    <Column Ellipsis Title="Durum" Field="@(context.IsActive?"Aktif":"Pasif")">
    </Column>
    @*<Column @bind-Field="@context.Summary" Sortable />*@
    <ActionColumn>
        <Space Size="middle">
            @*<SpaceItem><Button Danger OnClick="()=>Delete(context.Id)">Delete</Button></SpaceItem>*@
            <SpaceItem>
                <button class="btn btn-danger" @onclick="@(()=>DeleteUser(context.Id))">Sil</button>
            </SpaceItem>
            <SpaceItem>
                <button class="btn btn-success" @onclick="(() => goUpdatePage(context.Id))">Güncelle</button>

            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>
<br />
<p>PageIndex: @_pageIndex | PageSize: @_pageSize | Total: @_total</p>

@code {
    [Inject] public HttpClient HttpClient { get; set; }

    [Inject] public IUserService userService { get; set; }

    [Inject] NavigationManager navigationManager { get; set; }

    public List<UserDto> usersList = new List<UserDto>();

    IEnumerable<UserDto> selectedRows;
    ITable table;

    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadList();

        _total = 50;
    }
    protected void goCreateUserPage()
    {
        navigationManager.NavigateTo("/users/add");
    }
    protected void goUpdatePage(int userId)
    {
        navigationManager.NavigateTo($"/users/edit/{userId}");
    }
    protected async Task LoadList()
    {
        usersList = (await userService.GetAllUsers()).ToList();

    }
    protected async Task DeleteUser(int Id)
    {
        await userService.DeleteUserById(Id);
        await LoadList();
    }


    public async Task OnChange(QueryModel<UserDto> queryModel)
    {
       // forecasts = await GetForecastAsync(queryModel.PageIndex, queryModel.PageSize);
        _total = 50;
        Console.WriteLine(JsonSerializer.Serialize(queryModel));
    }

 
    public void RemoveSelection(int id)
    {
        var selected = selectedRows.Where(x => x.Id != id);
        selectedRows = selected;
    }

    private void Delete(int id)
    {
       // forecasts = forecasts.Where(x => x.Id != id).ToArray();
       // _total = forecasts.Length;
    }
}
